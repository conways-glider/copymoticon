---
const { name, symbol } = Astro.props;
---

<div class="emoticon-item">
  <span class="name">{name}</span>
  <span class="symbol">{symbol}</span>
  <emoticon-copy-button-wrapper data-clipboard-text={symbol}>
    <button class="copy-button">Copy</button>
  </emoticon-copy-button-wrapper>
</div>

<script>
  // Find all buttons with the `copy-button` class on the page.
  const buttons = document.querySelectorAll("button.copy-button");

  // Define the behaviour for our new type of HTML element.
  class EmoticonCopyButtonWrapper extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector("button");
      if (button === null) {
        console.error("No button found inside emoticon-copy-button-wrapper.");
        return;
      }

      // Each time the button is clicked, update the count.
      button.addEventListener("click", () => {
        // Copy the text from the `data-clipboard-text` attribute to the clipboard.
        const textToCopy = this.getAttribute("data-clipboard-text");
        if (textToCopy === null) {
          console.error(
            "No text to copy found in data-clipboard-text attribute.",
          );
          return;
        }

        if (navigator.clipboard) {
          navigator.clipboard
            .writeText(textToCopy)
            .then(() => showCopied(button))
            .catch((err) => {
              console.error("Failed to copy text: ", err);
              alert("Failed to copy text.");
            });
        } else {
          // Fallback for browsers that do not support the Clipboard API
          const textArea = document.createElement("textarea");
          textArea.value = textToCopy;
          document.body.appendChild(textArea);
          textArea.select();
          try {
            document.execCommand("copy");
            showCopied(button);
          } catch (err) {
            console.error("Fallback: Failed to copy text: ", err);
            alert("Failed to copy text.");
          }
          document.body.removeChild(textArea);
        }
      });
    }
  }

  // Tell the browser to use our EmoticonCopyButtonWrapper class for <emoticon-copy-button-wrapper> elements.
  customElements.define(
    "emoticon-copy-button-wrapper",
    EmoticonCopyButtonWrapper,
  );

  // Show 'Copied!' feedback briefly
  function showCopied(button: HTMLButtonElement) {
    const original = button.textContent;
    button.textContent = "Copied!";
    setTimeout(() => {
      button.textContent = original;
    }, 1000);
  }
</script>

<style>
  .emoticon-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #eee;
  }

  .emoticon-item:nth-child(odd) {
    background-color: #fafafa;
  }

  .name {
    font-weight: 600;
    margin-right: 1rem;
  }

  .symbol {
    font-family: monospace;
    font-size: 1.2rem;
    margin-right: auto;
  }

  .copy-button {
    background-color: #009688;
    color: #fff;
    border: none;
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
    cursor: pointer;
    border-radius: 4px;
    transition: background-color 0.2s ease;
  }

  .copy-button:hover {
    background-color: #00796b;
  }

  @media (max-width: 600px) {
    .emoticon-item {
      flex-direction: column;
      align-items: flex-start;
    }
    .copy-button {
      margin-top: 0.5rem;
    }
  }
</style>
